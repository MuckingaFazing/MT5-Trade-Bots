
#property copyright "Copyright 2023, MetaQuotes Ltd."
#property link      "https://www.mql5.com"
#property version   "1.00"
#include <Trade/Trade.mqh>

CTrade trade;//library to make trades
double volume = 0.01;
string state =""; 

int TP=75;//50
int SL=250;//250 
double ma200[];

int maHandle3 = iMA(_Symbol,_Period,3,0,MODE_SMA,PRICE_CLOSE);//fast,slow,signal SMA period
int maHandle10 = iMA(_Symbol,_Period,10,0,MODE_SMA,PRICE_CLOSE);//fast,slow,signal SMA period
int maHandle12 = iMA(_Symbol,_Period,12,0,MODE_SMA,PRICE_CLOSE);//fast,slow,signal SMA period
int maHandle200 = iMA(_Symbol,_Period,200,0,MODE_SMA,PRICE_CLOSE);//fast,slow,signal SMA period

int OnInit(){
   Print("MA Advisor started");
   //determine initial state
   
   double ma10[];
   ArraySetAsSeries(ma10,true);
   CopyBuffer(maHandle10, 0,0,50,ma10);
     
   double ma12[];  
   ArraySetAsSeries(ma12,true);
   CopyBuffer(maHandle12, 0,0,50,ma12);
  
   if(ma10[0] > ma12[0]){
      Print("Setting initial state to BUY");
      state = "BUY";
   }else if(ma12[0] > ma10[0]){
      Print("Setting initial state to SELL");
      state = "SELL";
   }
   return(INIT_SUCCEEDED);
}

void OnDeinit(const int reason){
}

void OnTick(){
   //check if something is open
   //check if we have active trades
   for(int i = PositionsTotal() - 1; i >= 0; i--) {
      ulong ticket = PositionGetTicket(i);
      string sym = PositionGetSymbol(i);
      if(ticket>0){
          if(sym == _Symbol){
          
          //lets print out the details of the trade to see if we can extend? 
            Sleep(20000);
            return;//this means we already have a trade for this... lets not stop the others
          }
      }
   }

   //check the time
   if(!timeInRange()){
      return;
   }
   //check the spread
   if(!spreadInRange()){
      return;
   } 

   checkState();  
}
 
 void checkState(){
   double ma10[];
   ArraySetAsSeries(ma10,true);
   CopyBuffer(maHandle10, 0,0,10,ma10);
      
   double ma12[];
   ArraySetAsSeries(ma12,true);
   CopyBuffer(maHandle12, 0,0,10,ma12);
   
   double ma3[];
   ArraySetAsSeries(ma3,true);
   CopyBuffer(maHandle3, 0,0,10,ma3);
   
   
   //10 above means buy
   if(ma10[0] > ma12[0]){//BUY
      Comment("BUY: GREEN=" + DoubleToString(ma10[0],6) + "RED=" + DoubleToString(ma12[0],6));
      if(state == "SELL"){
         Print("CROSSOVER HAPPENED");
         if(isUptrend(ma12[0], ma12[1], ma3[0], ma3[1])){
            Print("BUYING GREEN=" + DoubleToString(ma10[0],6) + " RED=" + DoubleToString(ma12[0],6));
            //get the TP
            double ask   = SymbolInfoDouble(Symbol(),SYMBOL_ASK);
            double tp=ask+TP*_Point;
            
            //get the SL  
            double sl=ma10[0]-SL*_Point;
            
            //place the order
            ArraySetAsSeries(ma200,true);
            CopyBuffer(maHandle200, 0,0,50,ma200);
            if(ma10[0] > ma200[0]){
               Print("MA10: " + ma10[0] + ", MA200: " + ma200[0]);
               trade.Buy(volume, _Symbol,0,sl,tp);
            }else{
               Print("Can only Buy in uptrend ma200");
            }
             
         }        
      }
      state = "BUY";    
   }else if(ma12[0] > ma10[0]){//SELL
      Comment("SELL: GREEN=" + DoubleToString(ma10[0],6) + "RED=" + DoubleToString(ma12[0],6));
      if(state == "BUY"){
         Print("CROSSOVER HAPPENED");
         if(isDowntrend(ma12[0], ma12[1], ma3[0], ma3[1])){
            Print("SELLING GREEN=" + DoubleToString(ma10[0],6) + " RED=" + DoubleToString(ma12[0],6));
            double bid   = SymbolInfoDouble(Symbol(),SYMBOL_BID);
            double tp=bid-TP*_Point;
            
            //get the SL  
            double sl=ma10[0]+SL*_Point;
            
            //place order
            //place the order
            ArraySetAsSeries(ma200,true);
            CopyBuffer(maHandle200, 0,0,50,ma200);
            if(ma10[0] < ma200[0]){
               trade.Sell(volume, _Symbol,0,sl,tp);
            }else{
               Print("Can only sell in downtrend ma200");             
            }
           }                     
      }
      state = "SELL";  
   }
 }
 
 bool timeInRange(){
   MqlDateTime mdt;
   TimeCurrent(mdt);
   if(mdt.hour == 19 ||mdt.hour == 20 || mdt.hour == 21 || mdt.hour == 22 ||mdt.hour == 23 || mdt.hour == 0){
      Comment("Bad Trading Hour: " + mdt.hour);
      return false;
   }
   return true;
 }

 bool spreadInRange(){
   int currentSpread = SymbolInfoInteger(_Symbol,SYMBOL_SPREAD);
   if(currentSpread > 25){
      Comment("Bad Spread: " + currentSpread);
      return false;
   }
   return true;
 }
 
 bool isUptrend(double cur, double bef, double cur3, double bef3){//12MA
   Print("Test Uptrend Bef: " + bef + ",NOW: " + cur);
   if(cur > bef && cur3 > bef3){
      Print("Uptrend confirmed");
      return true;
   }else{
      Print("Uptrend NOT confirmed");
      return false;
   }
 }
 
 bool isDowntrend(double cur, double bef, double cur3, double bef3){//12MA
   Print("Test Downtrend Bef: " + bef + ",NOW: " + cur);
   if(cur < bef && cur3 < bef3){
      Print("Downtrend confirmed");
      return true;
   }else{
      Print("Downtrend NOT confirmed");
      return false;
   }
 }

