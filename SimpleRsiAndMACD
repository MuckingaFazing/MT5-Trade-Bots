#property copyright "Copyright 2023, MetaQuotes Ltd."
#property link      "https://www.mql5.com"
#property version   "1.00"
#include <Trade/Trade.mqh>

ulong posTicket = 0;
int barsTotal;
double volume = 0.01;

CTrade trade;//library to make trades

int OnInit(){
  Print("Advisor Started for " + _Symbol);
  barsTotal = iBars(_Symbol,_Period);
  
  return(INIT_SUCCEEDED);
}

void OnDeinit(const int reason){
   Print("Advisor Stopped");
}

void OnTick(){

         //2023.01.11 19:55:23.165	SimpleRsi (USDJPY,M1)	Ticket: 67358866,MACD: 0.019786232924332126 Signal: 0.023562448532670536

   //check if we have active trades
   for(int i = PositionsTotal() - 1; i >= 0; i--) {
      ulong ticket = PositionGetTicket(i);
      string sym = PositionGetSymbol(i);
      if(ticket>0){
          if(sym == _Symbol){
          //lets print out the details of the trade to see if we can extend? 
          int macHandle = iMACD(_Symbol,_Period,12,26,9,PRICE_CLOSE);//fast,slow,signal SMA period
           // int macHandle = iMACD(_Symbol,_Period,34,144,9,PRICE_CLOSE);
            double macd[];
            CopyBuffer(macHandle,MAIN_LINE,1,4,macd);
            
            double signal[];
            CopyBuffer(macHandle,SIGNAL_LINE,1,4,signal);
            Print("Ticket: " + ticket + ",MACD: " + macd[0]+ " Signal: " + signal[0]);
            Sleep(20000);
            return;//this means we already have a trade for this... lets not stop the others
          }
      }
   }
   
      int maHandle = iMA(_Symbol,_Period,10,0,MODE_EMA,PRICE_CLOSE);//fast,slow,signal SMA period
         //int 200maHandle = iMA(_Symbol,_Period,10,0,MODE_EMA,PRICE_CLOSE);//fast,slow,signal SMA period
         double ma[];
         ArraySetAsSeries(ma,true);
         CopyBuffer(maHandle, 0,0,2,ma);
      //Print("curr:" + ma[0]); 
      //Print("aftr:" + ma[1]);
      //Print("M:" + ma[20]);  
      //Print("M:" + ma[50]); 
   posTicket = 0;
   RSI();  
   MACD();  
   Modify(); 
   Sleep(2000);
}

void MACD(){
   int bar = iBars(_Symbol, _Period);
   int macHandle = iMACD(_Symbol,_Period,12,26,9,PRICE_CLOSE);//fast,slow,signal SMA period
   //int macHandle = iMACD(_Symbol,_Period,34,144,9,PRICE_CLOSE);//scalping apparently this is better? fast,slow,signal SMA period
   double macd[];
   CopyBuffer(macHandle,MAIN_LINE,1,4,macd);
   
   double signal[];
   CopyBuffer(macHandle,SIGNAL_LINE,1,4,signal);
   //Print("SIGNAL3: " + DoubleToString(signal[3],4) + ",MACD1: " + DoubleToString(macd[3],4));
   //Print("SIGNAL2: " + DoubleToString(signal[2],4) + ",MACD1: " + DoubleToString(macd[2],4));
   //Print("SIGNAL1: " + DoubleToString(signal[1],4) + ",MACD1: " + DoubleToString(macd[1],4));
   //Print("SIGNAL0: " + DoubleToString(signal[0],4) + ",MACD0: " + DoubleToString(macd[0],4));
   
   if(macd[1] > signal[1] && macd[0] < signal [0]){
      Print(__FUNCSIG__, " > BUY CROSSOVER...");
      if(signal [0] < 0){//im guessing chances for uptrent is better? 
         //now lets check the trend, it needs to go up to be profitable
         int maHandle = iMA(_Symbol,_Period,12,0,MODE_EMA,PRICE_CLOSE);//fast,slow,signal SMA period
         //int 200maHandle = iMA(_Symbol,_Period,10,0,MODE_EMA,PRICE_CLOSE);//fast,slow,signal SMA period
         double ma[];
         ArraySetAsSeries(ma,true);
         CopyBuffer(maHandle, 0,0,50,ma);
         //Print("MA6: " +ma[6]);
         //Print("MA0: " +ma[0]);
         /*Print("MA SHOULD GROW: " + DoubleToString(ma[45],4)+ "," + DoubleToString(ma[5],4) + "," +DoubleToString(ma[4],4) + "," +DoubleToString(ma[3],3)
            + "," +DoubleToString(ma[2],4) + "," +DoubleToString(ma[1],4) + "," +DoubleToString(ma[0],4));
         if(ma[5] < ma[4] && ma[4] < ma[3] && ma[3] < ma[2] && ma[2] < ma[1] && ma[1] < ma[0]){*/
         Print("curr: " + ma[0] + ", beff:" + ma[1]);
         if(ma[0] > ma[1]){
            Print("UPTREND we can BUY");
            Print("Market movement: " + (ma[45] / ma[0] * 100) + "%");
                if((ma[0] / ma[45] * 100) < 0.5){
                  Print("Market is not moving enough");
                }
            int rsiHandle = iRSI(_Symbol, _Period,14,PRICE_CLOSE);//curr, timeframe, period, applied price
            double rsi[];
            CopyBuffer(rsiHandle,0,1,1,rsi);
            if(rsi[0] > 70){
               Print("RSI is very high... we should probably not touch this for buying: " + rsi[0]);
            }else{
               Buy();
            }
         }else{
            Print("DOWNTREND we can't BUY");
         }
      }else{
         Print("Signal above 0.000, risky buy");
      }
      
   }else if(macd[1] < signal[1] && macd[0] > signal [0]){
      Print(__FUNCSIG__, " > SELL CROSSOVER...");
      if(signal [0] > 0){
         //now lets check the trend, it needs to go down to be profitable
         int maHandle = iMA(_Symbol,_Period,12,0,MODE_EMA,PRICE_CLOSE);//fast,slow,signal SMA period
         double ma[];
         ArraySetAsSeries(ma,true);
         CopyBuffer(maHandle, 0,0,50,ma);
         //Print("MA6: " +ma[6]);
         //Print("MA0: " +ma[0]);
         //Print("MA SHOULD SHIRINK: " + DoubleToString(ma[45],4) + "," + DoubleToString(ma[5],4) + "," +DoubleToString(ma[4],4) + "," +DoubleToString(ma[3],3)
         //   + "," +DoubleToString(ma[2],4) + "," +DoubleToString(ma[1],4) + "," +DoubleToString(ma[0],4));
         //if(ma[5] > ma[4] && ma[4] > ma[3] && ma[3] > ma[2] && ma[2] > ma[1] && ma[1] > ma[0]){
            Print("curr: " + ma[0] + ", beff:" + ma[1]);
            if(ma[0] < ma[1]){
            //now check movement over time
               Print("Market movement: " + (ma[0] / ma[45] * 100) + "%");
                if((ma[0] / ma[45] * 100) < 0.5){
                  Print("Market is not moving enough");
                }
            Print("DOWNTREND we can sell");
            //lets just double check for extreme RSI
            int rsiHandle = iRSI(_Symbol, _Period,14,PRICE_CLOSE);//curr, timeframe, period, applied price
            double rsi[];
            CopyBuffer(rsiHandle,0,1,1,rsi);
            if(rsi[0] < 30){
               Print("RSI is very low... we should probably not touch this for selling: " + rsi[0]);
            }else{
               Sell();
            }
            
         }else{
            Print("UPTREND we can't sell");
         }
         //
      }else{
         Print("Signal below 0.000, risky sell");
      }
      
   }
}
  
void RSI(){
   int rsiHandle = iRSI(_Symbol, _Period,14,PRICE_CLOSE);//curr, timeframe, period, applied price
   double rsi[];
   CopyBuffer(rsiHandle,0,1,1,rsi);
   //Print("RSI: " + rsi[0]);
   
   if(rsi[0] > 80){
      Print("RSI ABOVE 80, current: " + rsi[0]);
      //Place Order
      //trade.Sell(0.01, _Symbol);
      //posTicket = trade.ResultOrder();
      Buy();
   }else if(rsi[0] < 20){
      //Place Order
      Print("RSI BELOW 20, current: " + rsi[0]);
      //open position
      //trade.Buy(0.01, _Symbol);
      //posTicket = trade.ResultOrder();
      Sell();
   }
   Comment("RSI: " + rsi[0] + "\n" + "POSTicket: " + posTicket);
   //modify order
   
      
}
void Sell(){
   trade.Sell(volume, _Symbol);
     posTicket = trade.ResultOrder();
}
void Buy(){
    trade.Buy(volume, _Symbol);
    posTicket = trade.ResultOrder();
}

void Modify(){
   if(PositionSelectByTicket(posTicket)){
   Print("Trying to modify");
      double posPrice = PositionGetDouble(POSITION_PRICE_OPEN);
      double posSl = PositionGetDouble(POSITION_SL);
      double posTp = PositionGetDouble(POSITION_TP);
      int posType = (int)PositionGetInteger(POSITION_TYPE);
      
      int decimals = GetDigits(posPrice);
      Print("Symbol" + _Symbol +", Decimals: " + decimals);
      double askPrice   = SymbolInfoDouble(Symbol(),SYMBOL_ASK);
      double bidPrice   = SymbolInfoDouble(Symbol(),SYMBOL_BID);
      
      Print("BID: " + bidPrice);
      Print("ASK: " + askPrice);
      
      if(posType == POSITION_TYPE_BUY){
         if(posSl == 0){
            Print("BUYING");
            double sl = 0;
            double tp = 0;
            if(decimals == 3){
               sl = bidPrice - 0.15;
               tp = askPrice + 0.03;
            }else{
               sl = bidPrice - 0.00150;
               tp = askPrice + 0.00003;
            }
            
            Print("CURR: " + posPrice + ",SL: " + sl + ", TP: " + tp);
            trade.PositionModify(posTicket,sl,tp);
            
         }      
      }
      else if(posType == POSITION_TYPE_SELL){
         if(posSl == 0){
            Print("SELLING");
            double sl = 0;
            double tp = 0;
            if(decimals == 3){
               sl = askPrice + 0.15;
               tp = bidPrice - 0.03;
            }else{
               sl = askPrice + 0.00150;
               tp = bidPrice - 0.00003;
            }
            Print("CURR: " + posPrice + ",SL: " + sl + ", TP: " + tp);
            trade.PositionModify(posTicket,sl,tp);
            
         }   
      }
   }else{
      posTicket = 0;
   }
}


int GetDigits(double num)
  {
   int d = 0; double p = 1;
   while(MathRound(num * p) / p != num)
     {
      p = MathPow(10, ++d);
     }
   return d;
  }
